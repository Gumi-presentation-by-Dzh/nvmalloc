This directory contains an example application implemented using libpmemobj.
hashset_atomic implements basic hash set using (mostly) atomic lists and
hashset_tx implements the same interface but using full transactions API.

To launch them:
./hashset_tx file [optional RNG seed]
or
./hashset_atomic file [optional RNG seed]

The file will either be created if it doesn't exist or opened if it contains
a valid pool.

Both applications expect one of the below commands on standard input:
h - help
i $value - insert $value
r $value - remove $value
c $value - check $value, returns 0/1
n $value - insert $value random values
p - print all values
d - print debug info
b - rebuild
q - quit

Atomic version, while simpler on the surface, have 2 significant drawbacks:
- libpmemobj's list API implements only double-linked lists, which wastes
  memory here (we don't need to traverse backward)
and what is more important:
- it needs to handle recovery process after crash/interruption

Transactional version implements its own single-linked lists (it's still not
memory efficient, because every allocation has significant overhead, so to
mitigate it application would have to keep more values in one node) and
can get away without any recovery process - every memory transaction is
either done in 0% or 100%.
