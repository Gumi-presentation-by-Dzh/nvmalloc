Linux NVM Library

This is benchmarks/pmem_persist_msync/README.

This directory contains a benchmark that measures and compares
average execution times of pmem_persist() and pmem_msync() functions.

Usage: pmem_persist_msync <file_name> <data_size> <iterations>

    Where <file_name> should be a file on a Persistent Memory
    aware file system. If it is not, a performance of pmem_persist()
    is not measured.

    <data_size> is a size of flushed data - the second argument
    of pmem_persist() and pmem_msync() functions.

    <iterations> tells the program how many times each of these functions
    should be called. The measured execution times are average times
    over given iterations.

There is a RUN.sh script that executes pmem_persist_msync program
a number of times (given by the 3rd argument NUM_TESTS) for a size
increasing in geometric progression starting from a value given
by the 4th argument (SIZE_START) with a multiplier given by the 5th argument
(SIZE_MULTIPLIER) and for a number of iterations given by the 2nd argument
(ITERATIONS):

Usage:
RUN.sh [POOL_FILE] [ITERATIONS] [NUM_TESTS] [SIZE_START] [SIZE_MULTIPLIER]

The default values are following:
- ITERATIONS = 100000, NUM_TESTS = 21, SIZE_START = 1, SIZE_MULTIPLIER = 2

So by default RUN.sh script is executed 21 times for data sizes equal
powers of 2 starting from 2^0 to 2^20.

The maximum size of a pool file is by default limited by MAX_SIZE (100 GB).
When (SIZE * ITERATIONS) exceeds MAX_SIZE, ITERATIONS is divided
by SIZE_MULTIPLIER. This behavior can be disabled by setting ADJUST_SIZE to 0.

Finally the script shows the collected results on two separate graphs:
one for separate average execution times of pmem_persist() and pmem_msync()
and one for ratio of these two average execution times.

output format:
    data_size ; average execution time of pmem_persist() ;
    data_size ; average execution time of pmem_msync() ;
    data_size ; ratio of execution times of pmem_persist() and pmem_msync() ;

Please, see the top-level README file for instructions on how to
build the libpmem library.
